[gd_scene load_steps=16 format=3 uid="uid://b23ttu16g3s4a"]

[ext_resource type="Script" uid="uid://cttslgu87en2f" path="res://scripts/gui/selected_teleporter.gd" id="1_cpy52"]
[ext_resource type="Texture2D" uid="uid://dbk6mxkwneibe" path="res://scripts/shaders/close_enough_texture.tres" id="2_3cbcy"]
[ext_resource type="Texture2D" uid="uid://b330eihja1q1c" path="res://resources/sprites/teleportDL.png" id="2_ewqdr"]
[ext_resource type="Texture2D" uid="uid://c5syp4ayosfa8" path="res://scripts/shaders/not_close_enough_texture.tres" id="3_rruxh"]
[ext_resource type="Texture2D" uid="uid://bubjw1twjwgro" path="res://resources/sprites/gui/teleporter_output.png" id="4_7vs1f"]
[ext_resource type="FontFile" uid="uid://c4bnatv11g13n" path="res://resources/fonts/Conthrax-SemiBold.otf" id="5_3cbcy"]
[ext_resource type="Texture2D" uid="uid://5u2e8y82xdyk" path="res://resources/sprites/gui/teleporter_input.png" id="5_5t8u3"]

[sub_resource type="Shader" id="Shader_rruxh"]
code = "shader_type canvas_item;

// The texture to scroll with.
uniform sampler2D scrollingTexture: hint_default_white;
// The scroll texture scale.
uniform vec2 textureScale = vec2(1.0);
// Angle to scroll towards. In degrees. Starts at the right.
uniform float angle: hint_range(0.0, 360.0) = 45.0;
// Speed to scroll at.
uniform float textureSpeed: hint_range(-10.0, 10.0) = 0.1;
// Outline thickness.
uniform float thickness: hint_range(0.0, 100.0) = 1.0;
// Used to compensate for alpha values.
uniform float tolerance: hint_range(0.0, 0.999) = 0.0;
// If on will draw at diagonals. Off is mainly for pixel art but you do you.
uniform bool diagonals = true;
// If diagonals are checked will check for half pixels so it rounds the outline a bit more.
uniform bool rounded = true;

// Compensate UV for outline.
void vertex() {
	VERTEX = vec2(VERTEX.x * (1.0 + TEXTURE_PIXEL_SIZE.x * thickness * 2.0), VERTEX.y * (1.0 + TEXTURE_PIXEL_SIZE.y * thickness * 2.0));
}

// Checks a fragment for the edge of an uv.
bool border(vec2 uv) {
	vec2 uvBorder = abs(uv - vec2(0.5));
	return max(step(0.5, uvBorder.x), step(0.5, uvBorder.y)) > 0.0;
}

// Gets alpha of given fragment if not near the edge.
float get_alpha(sampler2D tex, vec2 uv){
	float res = 0.0;
	if (!border(uv)) {
		res = texture(tex, uv).a;
	}
	return res;
}

// Checks for neighboring pixels.
float in_range(vec2 size, sampler2D tex, vec2 uv) {
	float res = 0.0;
	for (float i = -1.0; i < 2.0; i += 2.0) {
		res += get_alpha(tex, uv + vec2(i * size.x, 0.0));
		res += get_alpha(tex, uv + vec2(0.0, i * size.y));
		if (diagonals) {
			for (float j = -1.0; j < 2.0; j += 2.0) {
				res += get_alpha(tex, uv + vec2(i * size.x, j * size.y));
				if (rounded) {
					res += get_alpha(tex, uv + vec2(i * size.x, j * size.y * 0.5));
				}
			}
		}
	}
	return res;
}

void fragment() {
	if (thickness > 0.0) {
		// Correct image size to for outline in frame.
		vec2 uv = UV;
		uv -= vec2(0.5);
		float edge = TEXTURE_PIXEL_SIZE.x * thickness * 2.0;
		uv = uv + uv * edge;
		uv += vec2(0.5);

		// Apply outline.
		vec4 newColor = texture(TEXTURE, uv);
		if (newColor.a <= tolerance || border(uv)) {
			// Correct angle to start at right and convert to radians.
			float radiansAngle = radians(angle + 180.0);
			// Make a vector out of the angle.
			vec2 vector = vec2(cos(radiansAngle), sin(radiansAngle));
			float outline = in_range(TEXTURE_PIXEL_SIZE * thickness, TEXTURE, uv);
			vec4 textureColor = texture(scrollingTexture, fract(UV / textureScale + vector * textureSpeed * TIME));
			vec4 finalColor = step(1.0 - tolerance, outline) * textureColor;
			newColor = finalColor;
		}
		COLOR = newColor;
	}
}"

[sub_resource type="Gradient" id="Gradient_rruxh"]
colors = PackedColorArray(0, 0, 0, 0, 1, 1, 1, 0)

[sub_resource type="GradientTexture1D" id="GradientTexture1D_3cbcy"]
gradient = SubResource("Gradient_rruxh")

[sub_resource type="ShaderMaterial" id="ShaderMaterial_ewqdr"]
resource_local_to_scene = true
shader = SubResource("Shader_rruxh")
shader_parameter/scrollingTexture = SubResource("GradientTexture1D_3cbcy")
shader_parameter/textureScale = Vector2(1, 1)
shader_parameter/angle = 45.0
shader_parameter/textureSpeed = 0.1
shader_parameter/thickness = 25.0
shader_parameter/tolerance = 0.0
shader_parameter/diagonals = true
shader_parameter/rounded = true

[sub_resource type="StyleBoxEmpty" id="StyleBoxEmpty_e2lsa"]

[sub_resource type="StyleBoxFlat" id="StyleBoxFlat_7vs1f"]
bg_color = Color(0.847059, 0, 0.184314, 1)
corner_radius_top_left = 99999
corner_radius_top_right = 99999
corner_radius_bottom_right = 99999
corner_radius_bottom_left = 99999
shadow_color = Color(0.334387, 0, 0.114369, 1)
shadow_size = 1
shadow_offset = Vector2(0, 30)

[sub_resource type="StyleBoxFlat" id="StyleBoxFlat_5t8u3"]
bg_color = Color(0, 0.901961, 0.2, 0)
corner_radius_top_left = 99999
corner_radius_top_right = 99999
corner_radius_bottom_right = 99999
corner_radius_bottom_left = 99999
shadow_color = Color(0.333333, 0, 0.113725, 1)
shadow_size = 1
shadow_offset = Vector2(0, 30)

[sub_resource type="StyleBoxFlat" id="StyleBoxFlat_43si2"]
bg_color = Color(0.847059, 0, 0.183528, 1)
corner_radius_top_left = 99999
corner_radius_top_right = 99999
corner_radius_bottom_right = 99999
corner_radius_bottom_left = 99999

[node name="SelectedTeleporter" type="AnimatedSprite2D"]
material = SubResource("ShaderMaterial_ewqdr")
script = ExtResource("1_cpy52")
add_shader_texture = ExtResource("2_3cbcy")
remove_shader_texture = ExtResource("3_rruxh")
empty_texture = SubResource("GradientTexture1D_3cbcy")
output_texture = ExtResource("4_7vs1f")
input_texture = ExtResource("5_5t8u3")

[node name="ClickableControl" type="Control" parent="."]
layout_mode = 3
anchors_preset = 0
mouse_filter = 2

[node name="ClickableArea" type="TextureRect" parent="ClickableControl"]
modulate = Color(1, 1, 1, 0)
z_index = 3
layout_mode = 1
anchors_preset = 7
anchor_left = 0.5
anchor_top = 1.0
anchor_right = 0.5
anchor_bottom = 1.0
offset_left = -260.0
offset_top = -410.0
offset_right = 260.0
offset_bottom = 130.0
grow_horizontal = 2
grow_vertical = 0
mouse_filter = 0
texture = ExtResource("2_ewqdr")

[node name="RemoveControl" type="Control" parent="."]
visible = false
layout_mode = 3
anchors_preset = 0
offset_right = 40.0
offset_bottom = 40.0

[node name="RemoveTeleport" type="Button" parent="RemoveControl"]
z_index = 3
layout_mode = 1
anchors_preset = 7
anchor_left = 0.5
anchor_top = 1.0
anchor_right = 0.5
anchor_bottom = 1.0
offset_left = -117.0
offset_top = -246.0
offset_right = 117.0
grow_horizontal = 2
grow_vertical = 0
theme_override_colors/font_hover_pressed_color = Color(1, 1, 1, 1)
theme_override_colors/font_hover_color = Color(1, 1, 1, 1)
theme_override_colors/icon_normal_color = Color(1, 1, 1, 1)
theme_override_colors/font_outline_color = Color(1, 1, 1, 1)
theme_override_colors/font_color = Color(1, 1, 1, 1)
theme_override_colors/font_focus_color = Color(1, 1, 1, 1)
theme_override_colors/font_pressed_color = Color(1, 1, 1, 0)
theme_override_fonts/font = ExtResource("5_3cbcy")
theme_override_font_sizes/font_size = 200
theme_override_styles/focus = SubResource("StyleBoxEmpty_e2lsa")
theme_override_styles/hover = SubResource("StyleBoxFlat_7vs1f")
theme_override_styles/pressed = SubResource("StyleBoxFlat_5t8u3")
theme_override_styles/normal = SubResource("StyleBoxFlat_43si2")
text = "Ã—"
