[gd_scene load_steps=5 format=3 uid="uid://c4jwdbd2el2ca"]

[ext_resource type="Script" path="res://scripts/objects/gadget.gd" id="1_3434e"]

[sub_resource type="Shader" id="Shader_3mgpp"]
code = "shader_type canvas_item;

// The texture to scroll with.
uniform sampler2D scrollingTexture: hint_default_white;
// The scroll texture scale.
uniform vec2 textureScale = vec2(1.0);
// Angle to scroll towards. In degrees. Starts at the right.
uniform float angle: hint_range(0.0, 360.0) = 45.0;
// Speed to scroll at.
uniform float textureSpeed: hint_range(-10.0, 10.0) = 0.1;
// Outline thickness.
uniform float thickness: hint_range(0.0, 100.0) = 1.0;
// Used to compensate for alpha values.
uniform float tolerance: hint_range(0.0, 0.999) = 0.0;
// If on will draw at diagonals. Off is mainly for pixel art but you do you.
uniform bool diagonals = true;
// If diagonals are checked will check for half pixels so it rounds the outline a bit more.
uniform bool rounded = true;

// Compensate UV for outline.
void vertex() {
	VERTEX = vec2(VERTEX.x * (1.0 + TEXTURE_PIXEL_SIZE.x * thickness * 2.0), VERTEX.y * (1.0 + TEXTURE_PIXEL_SIZE.y * thickness * 2.0));
}

// Checks a fragment for the edge of an uv.
bool border(vec2 uv) {
	vec2 uvBorder = abs(uv - vec2(0.5));
	return max(step(0.5, uvBorder.x), step(0.5, uvBorder.y)) > 0.0;
}

// Gets alpha of given fragment if not near the edge.
float get_alpha(sampler2D tex, vec2 uv){
	float res = 0.0;
	if (!border(uv)) {
		res = texture(tex, uv).a;
	}
	return res;
}

// Checks for neighboring pixels.
float in_range(vec2 size, sampler2D tex, vec2 uv) {
	float res = 0.0;
	for (float i = -1.0; i < 2.0; i += 2.0) {
		res += get_alpha(tex, uv + vec2(i * size.x, 0.0));
		res += get_alpha(tex, uv + vec2(0.0, i * size.y));
		if (diagonals) {
			for (float j = -1.0; j < 2.0; j += 2.0) {
				res += get_alpha(tex, uv + vec2(i * size.x, j * size.y));
				if (rounded) {
					res += get_alpha(tex, uv + vec2(i * size.x, j * size.y * 0.5));
				}
			}
		}
	}
	return res;
}

void fragment() {
	if (thickness > 0.0) {
		// Correct image size to for outline in frame.
		vec2 uv = UV;
		uv -= vec2(0.5);
		float edge = TEXTURE_PIXEL_SIZE.x * thickness * 2.0;
		uv = uv + uv * edge;
		uv += vec2(0.5);
		
		// Apply outline.
		vec4 newColor = texture(TEXTURE, uv);
		if (newColor.a <= tolerance || border(uv)) {
			// Correct angle to start at right and convert to radians.
			float radiansAngle = radians(angle + 180.0);
			// Make a vector out of the angle.
			vec2 vector = vec2(cos(radiansAngle), sin(radiansAngle));
			float outline = in_range(TEXTURE_PIXEL_SIZE * thickness, TEXTURE, uv);
			vec4 textureColor = texture(scrollingTexture, fract(UV / textureScale + vector * textureSpeed * TIME));
			vec4 finalColor = step(1.0 - tolerance, outline) * textureColor;
			newColor = finalColor;
		}
		COLOR = newColor;
	}
}"

[sub_resource type="CompressedTexture2D" id="CompressedTexture2D_5lqlr"]
load_path = "res://.godot/imported/select_close_enough.png-c10c9c5bed5e0b48b0c50333031bb086.ctex"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_p5k61"]
resource_local_to_scene = true
shader = SubResource("Shader_3mgpp")
shader_parameter/textureScale = Vector2(1, 1)
shader_parameter/angle = 45.0
shader_parameter/textureSpeed = 0.0500005
shader_parameter/thickness = 12.458
shader_parameter/tolerance = 0.0
shader_parameter/diagonals = true
shader_parameter/rounded = true
shader_parameter/scrollingTexture = SubResource("CompressedTexture2D_5lqlr")

[node name="Gadget" type="StaticBody2D"]
y_sort_enabled = true
input_pickable = true
script = ExtResource("1_3434e")

[node name="CollisionPolygon2D" type="CollisionPolygon2D" parent="."]
scale = Vector2(0.611111, 0.563525)
polygon = PackedVector2Array(450, 0, 0, -300, -450, 0, 0, 300)

[node name="Sprite" type="Sprite2D" parent="."]
material = SubResource("ShaderMaterial_p5k61")
scale = Vector2(0.9, 0.9)
offset = Vector2(0, -178)

[node name="Timer" type="Timer" parent="."]
process_callback = 0

[node name="AudioStreamPlayer" type="AudioStreamPlayer2D" parent="."]
volume_db = 6.0

[connection signal="input_event" from="." to="." method="_on_input_event"]
[connection signal="mouse_entered" from="." to="." method="_on_mouse_entered"]
[connection signal="mouse_exited" from="." to="." method="_on_mouse_exited"]
[connection signal="finished" from="AudioStreamPlayer" to="." method="_on_audio_stream_player_finished"]
